// This is the proto file use by the class to do team2team communication
// If the class change the proto, we will need to update this
syntax = "proto3";

// The following option is for Java program
// To use this proto in you Java class, do 'import io.grpc.comm.*;'
//option java_multiple_files = true;
//option java_package = "io.grpc.comm";
//option java_outer_classname = "CommProto";
//option objc_class_prefix = "COMM";
package grpcComm;
option java_multiple_files = true;
option java_package = "com.cmpe275.grpcComm";
option java_outer_classname = "DataProto";
// Team will only accept Request message, and reponse with Response message
message Request {
    string fromSender = 1;
    string toReceiver = 2;
    string originalSender = 3;

    oneof payload {
        PingRequest ping = 6;
        PutRequest putRequest = 7;
        GetRequest getRequest = 8;
    }
}

message Response {
    StatusCode Code = 1; // PingRequest will only use this field if succeeded
    string msg = 2;
    MetaData metaData = 3;
    DatFragment datFragment = 4;
}

message PingRequest {
    string msg = 1; // optional
}

message PutRequest {
    MetaData metaData = 1;
    DatFragment datFragment = 2;
}

message GetRequest {
    MetaData metaData = 1;
    QueryParams queryParams = 2;
}

message QueryParams {
    string from_utc = 1;
    string to_utc = 2;
}

message MetaData {
    string uuid = 1;
    int32 numOfFragment = 2;
    int32 mediaType = 3;
}

message DatFragment {
    string timestamp_utc = 1;
    bytes data = 2;
}

enum StatusCode {
    Unknown = 0;
    Ok = 1;
    Failed = 2;
}

// grpc api function
service CommunicationService {
    rpc putHandler (stream Request) returns (Response);
    rpc getHandler (Request) returns (stream Response);
    rpc ping (Request) returns (Response);
}